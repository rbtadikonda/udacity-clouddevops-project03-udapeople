version: 2.1
           
commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string  
    steps:
      - run:
          name: capture the workflow id to be destroyed
          when: on_fail
          command: echo "destroying the environment with workflow_id=<< parameters.workflow_id >>"
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws s3 rm s3://udapeople-<< parameters.workflow_id >> --recursive
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.workflow_id >>
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.workflow_id >>
            
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow_id:
        type: string    
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            ##SUCCESS=$(curl https://kvdb.io/6R7FDKpoaJPSP5f9bYUMGx/migration_<< parameters.workflow_id >>)
            SUCCESS=1
            if(( $SUCCESS==1 )); 
            then
              cd ~/project/backend
              npm install
              npm run migrations:revert
            fi

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd backend
             npm install
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Run frontend test
          command: |
            cd frontend
            npm install
            npm run test
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run backend test
          command: |
            cd backend
            npm install
            npm run test
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build          
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: scan frontend for vulnerabilities
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: scan backend for vulnerabilities
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Insgall tar and gzip
          command: yum -y install tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file ./.circleci/files/backend.yml \
              --tags project=udapeople-backend \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Ensure front-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file ./.circleci/files/frontend.yml \
              --tags project=udapeople-frontend \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" 
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            echo -e "[web]" > ./.circleci/ansible/inventory.txt
            aws ec2 describe-instances \
                --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
               --query 'Reservations[*].Instances[*].PublicIpAddress' \
               --output text >> ./.circleci/ansible/inventory.txt
            cat ./.circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ./.circleci/ansible
          paths:
            - inventory.txt
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  configure-infrastructure:
    docker:
      - image: python:3.11-rc-alpine
    steps:
      - checkout
      - attach_workspace:
          at: ./.circleci/ansible
      - add_ssh_keys:
          fingerprints: ["df:33:ad:09:3c:dc:c9:64:e1:ba:82:7d:51:87:d7:63"]
      - run:
          name: Install ansible
          command: |
            apk add --update ansible
      - run:
          name: Install awscli
          command: |
            apk add --update aws-cli
      - run:
          name: Configure server
          command: |
            pwd
            cd ./.circleci/ansible
            cat inventory.txt 
            export ANSIBLE_HOST_KEY_CHECKING=false
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment:     
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}    

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]  
      - attach_workspace:
          at: .    
      - run:
          name: Run migrations
          command: |
            pwd
            cd ./backend
            npm run migrations > migrations_dump.txt
            cat ./migrations_dump.txt

      - run:
          name: Send migration results to kvdb
          command: |
            ## added the following line to prevent receiving "curl: (60) SSL certificate problem: certificate has expired"
            echo "insecure" >> ~/.curlrc
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then 
              curl https://kvdb.io/6R7FDKpoaJPSP5f9bYUMGx/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi  
      - destroy-environment:     
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}  

  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install tar gzip and curl
          command: yum install -y tar gzip curl
      - run:
          name: Install node
          command: |
            curl -sL https://rpm.nodesource.com/setup_14.x | bash -
            yum install -y nodejs
            node --version
      - attach_workspace:
          at: . 
      - run:
          name: Get backend url
          command: |
            pwd
            export BACKEND_IP=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL is ${API_URL}"
            echo $API_URL >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            pwd
            cd frontend
            npm install
            ## npm audit fix --audit-level=critical --force
            ## npm audit fix --force
            ## npm audit --audit-level=critical
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive

      - destroy-environment:     
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}    
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}  

  deploy-backend:
    docker:
      - image: python:3.11-rc-alpine
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["df:33:ad:09:3c:dc:c9:64:e1:ba:82:7d:51:87:d7:63"]
      - attach_workspace:
          at: ./.circleci/ansible
      - run:
          name: Install curl npm and nodejs
          command: |
            apk add curl
            apk add --update npm nodejs
      - run:
          name: Install ansible aws-cli tar and gzip
          command: |
            apk update
            apk add --update ansible aws-cli tar gzip
      - run:
          name: Install AwsCli
          command: |
            pip3 install awscli
      - run:
          name: Add environment info to backend folder
          command: |
            echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION
            echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> "./backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> "./backend/.env"
            echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> "./backend/.env"
            echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> "./backend/.env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> "./backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "./backend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "./backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "./backend/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "./backend/.env"
      - run:
          name: Deploy backend
          command: |
            pwd
            cd backend
            npm i
            npm run build
            cd ..
            tar -C backend -czvf artifact.tar.gz .
            echo "pwd $PWD after archive is created"
            echo "Contents of the inventory file is ..."
            cat .circleci/ansible/inventory.txt
            cd .circleci/ansible
            ansible-playbook -i inventory.txt deploy-backend.yml
      - destroy-environment:     
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7} 
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}  

  smoke-test:
    docker:
      - image: python:3.11-rc-alpine
    steps:
      - checkout
      - attach_workspace:
          at: ./.circleci/ansible
      - run:
          name: Install curl npm and nodjs
          command: |
            apk add curl
            apk add --update npm nodejs
      - run:
          name: Install AwsCli
          command: |
            pip3 install awscli
      - run:
          name: Backend smoke test.
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
            echo "smoketest BACKEND_IP=${BACKEND_IP}"
            export BACKEND_API_URL="http://${BACKEND_IP}:3030"
            if curl -s "${BACKEND_API_URL}/api/status" | grep "ok"
            then 
              return 1
            else
              return 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            FRONTEND_URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"
            echo "FRONTEND_URL=${FRONTEND_URL}"
            if curl -s ${FRONTEND_URL} | grep "Welcome"
              then
                return 0
            else
                return 1
            fi
      - destroy-environment:     
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7} 
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}  

  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Get old stack workflow id
          command: |
            ## Fetch the Old workflow ID
            export OldWorkflowID=$(aws cloudformation \
                  list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                  --no-paginate --output text)
            export OldWorkflowID="${OldWorkflowID}"
            ## Fetch the stack names          
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
                  --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
      - run:
          name: Remove old stacks and files
          command: |
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
            fi

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      #- test-frontend:
      #    requires: [build-frontend]
      #- test-backend:
      #    requires: [build-backend]
      #- scan-frontend:
      #    requires: [build-frontend]
      #- scan-backend:
      #    requires: [build-backend]
      - deploy-infrastructure:
      #    requires: [scan-backend, scan-frontend, test-frontend, test-backend]
           requires: [build-frontend, build-backend]
      - configure-infrastructure:
           requires: [deploy-infrastructure]
      - run-migrations:
           requires: [configure-infrastructure]
      - deploy-frontend:
           requires: [run-migrations]
      - deploy-backend:
           requires: [run-migrations]
      - smoke-test:
           requires: [deploy-backend, deploy-frontend]